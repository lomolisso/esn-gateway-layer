version: "3.8"
name: esn
services:
  # --- ESN Gateway API ---
  gateway-api:
    container_name: gateway-api
    build:
      context: ./esn-gateway-api
      dockerfile: Dockerfile
    volumes:
      - ./esn-gateway-api:/app
    environment:
      APP_BACKEND_URL: "${APP_BACKEND_URL}"
      SECRET_KEY: "${SECRET_KEY}"
      TIMEZONE: "${TIMEZONE}"
      EDGEX_DEVICE_PROFILE_FILE: "${EDGEX_DEVICE_PROFILE_FILE}"
      EDGEX_DEVICE_CONFIG_TEMPLATE_FILE: "${EDGEX_DEVICE_CONFIG_TEMPLATE_FILE}"
      EDGEX_FOUNDRY_CORE_METADATA_API_URL: "${EDGEX_FOUNDRY_CORE_METADATA_API_URL}"
      EDGEX_FOUNDRY_CORE_COMMAND_API_URL: "${EDGEX_FOUNDRY_CORE_COMMAND_API_URL}"
      EDGE_GATEWAY_DEVICE_NAME: "${EDGE_GATEWAY_DEVICE_NAME}"
      EDGE_GATEWAY_POP_KEYWORD: "${EDGE_GATEWAY_POP_KEYWORD}"
      ESN_BLE_PROV_URL: "${ESN_BLE_PROV_URL}"
      ESN_PRED_NODE_URL: "${ESN_PRED_NODE_URL}"
      ESN_REDIS_URL: "${ESN_REDIS_URL}"
    ports:
      - "8012:8012"
    depends_on:
      - gateway-redis
    networks:
      - esn-gateway-layer-network 
      - edgex-network
  
  gateway-redis:
    container_name: gateway-redis
    image: redis:7.0-alpine
    command: redis-server --port 6380
    ports:
      - mode: ingress
        host_ip: 127.0.0.1
        target: 6380
        published: "6380"
        protocol: tcp
    restart: always
    networks:
      - esn-gateway-layer-network

  # --- ESN Gateway BLE Provisioning ---


  # --- ESN Gateway Predictive Node ---
  predictive-node:
    container_name: predictive-node
    build:
      context: ./esn-gateway-microservices/esn-predictive-node
      dockerfile: Dockerfile.gateway
    volumes:
      - ./esn-gateway-microservices/esn-predictive-node:/app
    environment:
      SECRET_KEY: "${SECRET_KEY}"
      ESN_API_URL: "${ESN_API_URL}"
      USE_TFLITE: "${USE_TFLITE}"
      ESN_REDIS_URL: "${ESN_REDIS_URL}"
      CELERY_BROKER_URL: "${CELERY_BROKER_URL}"
    ports:
      - "8014:8014"
    depends_on:
      - gateway-redis
    networks:
      - esn-gateway-layer-network
      - edgex-network
  
  celery-worker:
    container_name: celery-worker
    build:
      context: ./esn-gateway-microservices/esn-predictive-node/app/celery_worker
      dockerfile: Dockerfile.gateway
    volumes:
      - ./esn-gateway-microservices/esn-predictive-node:/app
    environment:
      USE_TFLITE: "${USE_TFLITE}"
      ESN_REDIS_URL: "${ESN_REDIS_URL}"
      CELERY_BROKER_URL: "${CELERY_BROKER_URL}"
    depends_on:
      - predictive-node
      - gateway-redis
    networks:
      - esn-gateway-layer-network
      - edgex-network
    

  # --- EdgeX Foundry ---
  app-export:
    container_name: edgex-app-export
    depends_on:
      consul:
        condition: service_started
        required: true
      core-data:
        condition: service_started
        required: true
    environment:
      EDGEX_PROFILE: export
      SERVICE_HOST: edgex-app-export
      EDGEX_SECURITY_SECRET_STORE: "false"
      CLIENTS_CORE_COMMAND_HOST: edgex-core-command
      CLIENTS_CORE_DATA_HOST: edgex-core-data
      CLIENTS_CORE_METADATA_HOST: edgex-core-metadata
      CLIENTS_SUPPORT_NOTIFICATIONS_HOST: edgex-support-notifications
      CLIENTS_SUPPORT_SCHEDULER_HOST: edgex-support-scheduler
      DATABASE_HOST: edgex-redis
      MESSAGEQUEUE_HOST: edgex-redis
      REGISTRY_HOST: edgex-core-consul
      TRIGGER_EDGEXMESSAGEBUS_PUBLISHHOST_HOST: edgex-redis
      TRIGGER_EDGEXMESSAGEBUS_SUBSCRIBEHOST_HOST: edgex-redis
      EDGEX_CONFIG_DIR: "/config"
      WRITABLE_PIPELINE_FUNCTIONS_HTTPEXPORTCLOUDPREDICTIONREQUEST_PARAMETERS_URL: "${EDGE_SENSOR_CLOUD_PREDICTION_REQUEST_ENDPOINT}"
      WRITABLE_PIPELINE_FUNCTIONS_HTTPEXPORTDATA_PARAMETERS_URL: "${EDGE_SENSOR_EXPORT_DATA_ENDPOINT}"
      WRITABLE_PIPELINE_FUNCTIONS_HTTPEXPORTPREDICTIONLOG_PARAMETERS_URL: "${EDGE_SENSOR_PREDICTION_LOG_ENDPOINT}"
      WRITABLE_PIPELINE_FUNCTIONS_HTTPEXPORTCOMMANDREQUEST_PARAMETERS_URL: "${EDGE_SENSOR_PENDING_COMMANDS_ENDPOINT}"
      WRITABLE_PIPELINE_FUNCTIONS_HTTPEXPORTGATEWAYPREDICTIONREQUEST_PARAMETERS_URL: "${EDGE_SENSOR_GATEWAY_PREDICTION_REQUEST_ENDPOINT}"
    hostname: edgex-app-export
    image: nexus3.edgexfoundry.org:10004/app-service-configurable-arm64:latest
    networks:
      edgex-network: null
    ports:
      - mode: ingress
        host_ip: 127.0.0.1
        target: 59704
        published: "59704"
        protocol: tcp
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 2002:2001
    volumes:
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
        bind:
          create_host_path: true
      - ./esn-gateway-microservices/esn-edgex-foundry/edgex-config/app-export:/config
  consul:
    command:
      - agent
      - -ui
      - -bootstrap
      - -server
      - -client
      - 0.0.0.0
    container_name: edgex-core-consul
    hostname: edgex-core-consul
    image: hashicorp/consul:1.16
    networks:
      edgex-network: null
    ports:
      - mode: ingress
        host_ip: 0.0.0.0
        target: 8500
        published: "8500"
        protocol: tcp
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: root:root
    volumes:
      - type: volume
        source: consul-config
        target: /consul/config
        volume: {}
      - type: volume
        source: consul-data
        target: /consul/data
        volume: {}
  core-command:
    container_name: edgex-core-command
    depends_on:
      consul:
        condition: service_started
        required: true
      core-metadata:
        condition: service_started
        required: true
      database:
        condition: service_started
        required: true
    environment:
      EDGEX_SECURITY_SECRET_STORE: "false"
      EXTERNALMQTT_URL: tcp://edgex-mqtt-broker:1883
      SERVICE_HOST: edgex-core-command
    hostname: edgex-core-command
    image: nexus3.edgexfoundry.org:10004/core-command-arm64:latest
    networks:
      edgex-network: null
    ports:
      - mode: ingress
        host_ip: 127.0.0.1
        target: 59882
        published: "59882"
        protocol: tcp
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 2002:2001
    volumes:
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
        bind:
          create_host_path: true
  core-common-config-bootstrapper:
    container_name: edgex-core-common-config-bootstrapper
    depends_on:
      consul:
        condition: service_started
        required: true
    environment:
      ALL_SERVICES_DATABASE_HOST: edgex-redis
      ALL_SERVICES_MESSAGEBUS_HOST: edgex-redis
      ALL_SERVICES_REGISTRY_HOST: edgex-core-consul
      APP_SERVICES_CLIENTS_CORE_METADATA_HOST: edgex-core-metadata
      DEVICE_SERVICES_CLIENTS_CORE_METADATA_HOST: edgex-core-metadata
      EDGEX_SECURITY_SECRET_STORE: "false"
    hostname: edgex-core-common-config-bootstrapper
    image: nexus3.edgexfoundry.org:10004/core-common-config-bootstrapper-arm64:latest
    networks:
      edgex-network: null
    read_only: true
    security_opt:
      - no-new-privileges:true
    user: 2002:2001
    volumes:
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
        bind:
          create_host_path: true
  core-data:
    container_name: edgex-core-data
    depends_on:
      consul:
        condition: service_started
        required: true
      core-metadata:
        condition: service_started
        required: true
      database:
        condition: service_started
        required: true
    environment:
      EDGEX_SECURITY_SECRET_STORE: "false"
      SERVICE_HOST: edgex-core-data
    hostname: edgex-core-data
    image: nexus3.edgexfoundry.org:10004/core-data-arm64:latest
    networks:
      edgex-network: null
    ports:
      - mode: ingress
        host_ip: 127.0.0.1
        target: 59880
        published: "59880"
        protocol: tcp
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 2002:2001
    volumes:
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
        bind:
          create_host_path: true
  core-metadata:
    container_name: edgex-core-metadata
    depends_on:
      consul:
        condition: service_started
        required: true
      database:
        condition: service_started
        required: true
    environment:
      EDGEX_SECURITY_SECRET_STORE: "false"
      SERVICE_HOST: edgex-core-metadata
    hostname: edgex-core-metadata
    image: nexus3.edgexfoundry.org:10004/core-metadata-arm64:latest
    networks:
      edgex-network: null
    ports:
      - mode: ingress
        host_ip: 127.0.0.1
        target: 59881
        published: "59881"
        protocol: tcp
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 2002:2001
    volumes:
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
        bind:
          create_host_path: true
  database:
    container_name: edgex-redis
    hostname: edgex-redis
    image: redis:7.0-alpine
    networks:
      edgex-network: null
    ports:
      - mode: ingress
        host_ip: 127.0.0.1
        target: 6379
        published: "6379"
        protocol: tcp
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: root:root
    volumes:
      - type: volume
        source: db-data
        target: /data
        volume: {}
  device-mqtt:
    container_name: edgex-device-mqtt
    depends_on:
      consul:
        condition: service_started
        required: true
      core-data:
        condition: service_started
        required: true
      core-metadata:
        condition: service_started
        required: true
      mqtt-broker:
        condition: service_started
        required: true
    environment:
      EDGEX_SECURITY_SECRET_STORE: "false"
      MQTTBROKERINFO_HOST: edgex-mqtt-broker
      SERVICE_HOST: edgex-device-mqtt
      DEVICE_DEVICESDIR: /config/devices
      DEVICE_PROFILESDIR: /config/profiles
    hostname: edgex-device-mqtt
    image: nexus3.edgexfoundry.org:10004/device-mqtt-arm64:latest
    networks:
      edgex-network: null
    ports:
      - mode: ingress
        host_ip: 127.0.0.1
        target: 59982
        published: "59982"
        protocol: tcp
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 2002:2001
    volumes:
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
        bind:
          create_host_path: true
      - ./esn-gateway-microservices/esn-edgex-foundry/edgex-config/device-mqtt:/config
  mqtt-broker:
    command:
      - /usr/sbin/mosquitto
      - -c
      - /mosquitto.conf
    container_name: edgex-mqtt-broker
    hostname: edgex-mqtt-broker
    image: eclipse-mosquitto:2.0
    networks:
      edgex-network: null
    ports:
      - mode: ingress
        host_ip: 0.0.0.0
        target: 1883
        published: "1883"
        protocol: tcp
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 2002:2001
    volumes:
      - ./esn-gateway-microservices/esn-edgex-foundry/edgex-config/mqtt-broker/mosquitto.conf:/mosquitto.conf
  support-notifications:
    container_name: edgex-support-notifications
    depends_on:
      consul:
        condition: service_started
        required: true
      database:
        condition: service_started
        required: true
    environment:
      EDGEX_SECURITY_SECRET_STORE: "false"
      SERVICE_HOST: edgex-support-notifications
    hostname: edgex-support-notifications
    image: nexus3.edgexfoundry.org:10004/support-notifications-arm64:latest
    networks:
      edgex-network: null
    ports:
      - mode: ingress
        host_ip: 127.0.0.1
        target: 59860
        published: "59860"
        protocol: tcp
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 2002:2001
    volumes:
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
        bind:
          create_host_path: true
  support-scheduler:
    container_name: edgex-support-scheduler
    depends_on:
      consul:
        condition: service_started
        required: true
      database:
        condition: service_started
        required: true
    environment:
      EDGEX_SECURITY_SECRET_STORE: "false"
      INTERVALACTIONS_SCRUBAGED_HOST: edgex-core-data
      INTERVALACTIONS_SCRUBPUSHED_HOST: edgex-core-data
      SERVICE_HOST: edgex-support-scheduler
    hostname: edgex-support-scheduler
    image: nexus3.edgexfoundry.org:10004/support-scheduler-arm64:latest
    networks:
      edgex-network: null
    ports:
      - mode: ingress
        host_ip: 127.0.0.1
        target: 59861
        published: "59861"
        protocol: tcp
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 2002:2001
    volumes:
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
        bind:
          create_host_path: true
  ui:
    container_name: edgex-ui-go
    environment:
      EDGEX_SECURITY_SECRET_STORE: "false"
      SERVICE_HOST: edgex-ui-go
    hostname: edgex-ui-go
    image: nexus3.edgexfoundry.org:10004/edgex-ui-arm64:latest
    networks:
      edgex-network: null
    ports:
      - mode: ingress
        target: 4000
        published: "4000"
        protocol: tcp
    read_only: true
    restart: always
    security_opt:
      - no-new-privileges:true
    user: 2002:2001
    volumes:
      - type: bind
        source: /etc/localtime
        target: /etc/localtime
        read_only: true
        bind:
          create_host_path: true

volumes:
  consul-config:
    name: edgex_consul-config
  consul-data:
    name: edgex_consul-data
  db-data:
    name: edgex_db-data
  kuiper-data:
    name: edgex_kuiper-data
  kuiper-etc:
    name: edgex_kuiper-etc
  kuiper-log:
    name: edgex_kuiper-log
  kuiper-plugins:
    name: edgex_kuiper-plugins

networks:
  esn-gateway-layer-network:
    name: esn-gateway-layer-network
    driver: bridge
  edgex-network:
    name: edgex_edgex-network
    driver: bridge
